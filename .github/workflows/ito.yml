name: ITO CI

on:
  # We want to trigger the build & test pipelines in every branch.
  push:
    # But do no run the pipeline when only `md` files are modified.
    paths-ignore:
      - '**.md'

  # But we don't want to trigger them on every pull request.
  # Given that our PRs come from the same repo, and not a fork,
  # any PR has already some commits that triggered this workflow.
  # This avoids triggering duplicate checks.
  # pull_request:

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

env:
  # Enables color display for `cargo`
  CARGO_TERM_COLOR: always

  # Enables color display for JS cli apps
  FORCE_COLOR: 1

jobs:

  check-bindings:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-cargo-check-${{ hashFiles('Cargo.lock') }}
    - run: cargo install near-syn --version 0.4.2
    - run: yarn ts
    - run: git --no-pager diff --exit-code ito.ts

  build-wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry/cache
          ~/.cargo/registry/index
          target
        key: ${{ runner.os }}-cargo-build-wasm-${{ hashFiles('Cargo.lock') }}
    - run: rustup target add wasm32-unknown-unknown
    - run: cargo build --target wasm32-unknown-unknown --release

    # Monitor contract size
    - run: ls -lh target/wasm32-unknown-unknown/release/ito_contract.wasm

  unit-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry/cache
          ~/.cargo/registry/index
          target
        key: ${{ runner.os }}-cargo-unit-test-${{ hashFiles('Cargo.lock') }}
    - run: cargo test

  unit-nextest:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo
          !~/.cargo/registry/src
          target
        key: ${{ runner.os }}-cargo-unit-nextest-${{ hashFiles('Cargo.lock') }}
    - run: cargo install cargo-nextest
    - run: cargo nextest run

  coverage-test:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo
          !~/.cargo/registry/src
          target
        key: ${{ runner.os }}-cargo-coverage-test-${{ hashFiles('Cargo.lock') }}
    - run: rustup component add llvm-tools-preview
    - run: cargo install cargo-llvm-cov
    - run: cargo llvm-cov

  e2e-sandbox-test:
    runs-on: ubuntu-latest
    needs: build-wasm
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo
          !~/.cargo/registry/src
          target/
          nearcore/
        key: ${{ runner.os }}-cargo-e2e-sandbox-test-${{ hashFiles('Cargo.lock') }}
    - run: rustup target add wasm32-unknown-unknown
    - run: cargo build --target wasm32-unknown-unknown --release
    - run: yarn install --frozen-lockfile
    - run: yarn sandbox:clone
      continue-on-error: true
    - run: yarn sandbox:make
    - run: yarn sandbox:init
    - run: yarn sandbox:run &
    - run: yarn test:sandbox
    timeout-minutes: 30

  e2e-testnet-test:
    runs-on: ubuntu-latest
    needs: build-wasm
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry/cache
          ~/.cargo/registry/index
          target
        key: ${{ runner.os }}-cargo-e2e-testnet-test-${{ hashFiles('Cargo.lock') }}
    - run: rustup target add wasm32-unknown-unknown
    - run: cargo build --target wasm32-unknown-unknown --release
    - run: yarn install --frozen-lockfile
    - run: yarn test:testnet
    timeout-minutes: 10
